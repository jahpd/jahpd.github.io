// Generated by CoffeeScript 1.10.0
var compile;

(function() {
  var _s, i, len, ref, results, script, src;
  ref = ['processing.min.js', 'p5.dom.min.js'];
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    src = ref[i];
    script = document.querySelectorAll("[src='" + src + "']");
    if (script.length === 0) {
      _s = document.createElement('script');
      _s.setAttribute('type', 'text/javascript');
      _s.setAttribute('charset', 'utf8');
      results.push(_s.Attribute('src', src));
    } else {
      results.push(void 0);
    }
  }
  return results;
})();

compile = function(code) {
  return CoffeeScript.compile(code);
};

window.addEventListener("DOMContentLoaded", function() {
  var cnv, code, fn, newscope, runnable, s, scope, sketch, sketchContainer;
  scope = new Object();
  sketchContainer = document.getElementByClassName('p5')[0];
  cnv = sketchContainer.getElementByTagName('canvas')[0];
  sketch = document.getElementsByTagName('code');
  runnable = sketch.textContent.replace(/^\s+|\s+$/g, '');
  code = compile(runnable);
  fn = new Function(compile(code));
  newscope = new Object();
  fn.call(newscope);
  s = function(p) {
    var i, len, method, ref, results;
    if (compiled) {
      if (!scope.setup) {
        return p.setup = function() {
          p.createCanvas(640, 480);
          return p.background(200);
        };
      } else if (scope.setup) {
        p.setup = scope.setup;
        ref = ['setup', 'draw', 'preload', 'mousePressed', 'mouseReleased', 'mouseMoved', 'mouseDragged', 'mouseClicked', 'mouseWheel', 'touchStarted', 'touchMoved', 'touchEnded', 'keyPressed', 'keyReleased', 'keyTyped'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          method = ref[i];
          if (scope[method]) {
            results.push(p[method] = scope[method]);
          }
        }
        return results;
      }
    }
  };
  return p5(s, cnv);
});
